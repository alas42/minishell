


//IMPORTANT

// char	**get_cmd_args(t_infos *info, int start, int end)
// {
// 	int		i;
// 	t_token	*tokens;
// 	int		counter;
// 	char	**args;
// 	char	*join_str;

// 	i = -1;
// 	counter = 0;
// 	tokens = info->tokens;
// 	join_str = ft_strdup("");
// 	while(++i < start)
// 		tokens = tokens->next;
// 	while(i++ <= end && tokens != NULL)
// 	{
// 		if (!(ft_strcmp(tokens->type, "literal")))
// 		{
// 			printf("token->content [%s]\n", tokens->content);
// 			join_str = merge_content(join_str, tokens->content, 1);
// 			counter++;
// 		}
// 		tokens = tokens->next;
// 	}
// 	printf("counter is [%d]\n", counter);

// 	join_str[ft_strlen(join_str) - 1] = '\0';
// 	args = ft_split(join_str, ' ');
// 	free(join_str);
// 	return (args);
// }















// char	*merge_content(char *str, char *content, int space)
// {
// 	char	*temp;

// 	temp = NULL;
// 	if (space == 1)
// 	{
// 		if (str)
// 		{
//    			temp = ft_strdup(str);
// 			free(str);
// 			str = ft_strjoin(temp, " ");
// 			free(temp);
// 		}
// 	}
// 	if (str)
// 	{
//    		temp = ft_strdup(str);
// 		free(str);
// 	}
// 	str = ft_strjoin(temp, content);
// 	if (temp)
// 		free(temp);
// 	return (str);
// }





















//void    expand_dollar(t_infos *info)
//{
//	t_token *token;

//	token = info->tokens;
//	while(token)
//	{
//		if (!(ft_strcmp(token->type, "dollar")))
//		{
//			printf("token->content [%s]\n", token->content);
//		}
//		token = token->next;
//	}
//}


//void    expand_dollar(t_infos *info)
//{
//	t_token     *token;
//	char        **arg;
//	char        *ret_val;
//	int         i;
//	int         j;
//	int         counter;

//	i = 0;
//	counter = 0;
//	token = info->tokens;
//	ret_val = NULL;
//	while (token)
//	{
//		if (!(ft_strcmp(token->type, "lldollar")))
//		{
//			ret_val = check_dollar_arg(info, token->content);
//			// printf("ret_val in type dollar [%s]\n", ret_val);
//			free(token->content);
//			token->content = ft_strdup(ret_val);
//			free(ret_val);
//			free(token->type);
//			token->type = ft_strdup("literal");
//		}
//		if (!(ft_strcmp(token->type, "dollar")))
//		{
//			//printf("content - [%s]\n", token->content);
//			arg = ft_split(token->content, ' ');
//			free(token->content);
//			token->content = ft_strdup("");
//			while(arg[i])
//			{
//				j = 0;
//				while (arg[i][j])
//				{
//					if (arg[i][j] == '$')
//					{
//						ret_val = check_dollar_arg(info, arg[i]);
//						// printf("ret_val in type literal_dollar [%s]\n", ret_val);
//						token->content =  merge_content(token->content, ret_val, 1);
//						free(ret_val);
//						counter = 1;
//						break;
//					}
//					j++;
//				}
//				if (counter == 0)
//					token->content = merge_content(token->content, arg[i], 1);
//				counter = 0;
//				i++;
//			}
//			free(token->type);
//			token->type = ft_strdup("literal");
//			free_doub_char(arg);
//		}
//		token = token->next;
//	}
//}











// void    check_quotes(t_infos *info)
// {
// 	t_token *token;
// 	int     close;

// 	close = -2;
// 	token = info->tokens;

// 	while(token)
// 	{
// 		if (!(ft_strcmp(token->type, "double_quote")))
// 		{
// 			close = check_closing_quote(info, token->pos, 2);
// 			if (close < 0)
// 				printf("error cannot find closing quote\n");
// 			else
// 			{
// 				merge_tokens(info, token->pos, close - token->pos);
// 				update_token_type(info, "double_quote", "literal");
// 				token = info->tokens;
// 			}
// 			close = -2;
// 		}
// 		else if (!(ft_strcmp(token->type, "single_quote")))
// 		{
// 			close = check_closing_quote(info, token->pos, 1);
// 			if (close < 0)
// 				printf("error cannot find closing quote\n");
// 			else
// 			{
// 				merge_tokens(info, token->pos, close - token->pos);
// 				update_token_type(info, "single_quote", "literal");
// 				token = info->tokens;
// 			}
// 		}
// 		close = -2;
// 		token = token->next;
// 	}
// }


// void    remove_consec_doubqt(t_infos *info, int pos)
// {
//     t_token     *temp;
//     int         total;
//     int         i;

//     temp = info->tokens;
//     i = 0;
//     while (i++ <= pos)
//         temp = temp->next;
//     while (temp)
//     {
//         if (!(ft_strcmp(temp->type, "double_quote")))
//         {
//             total = -1;
//             total = ft_strlen(temp->content) % 2;
//             free(temp->content);
//             if (total == 1)
//             {
//                 temp->content = ft_strdup("a");
//                 temp->content[0] = '"';
//             }
//             else
//             {
//                 temp->content = ft_strdup(" ");
//                 free(temp->content);
//                 temp->content = ft_strdup("space");
//             }
//         }
//         temp = temp->next;
//     }
// }



//void	add_to_cmd(t_infos *info)
//{
//	t_cmd	*new;
//	t_token	*token;
//	char	*str;

//	str = NULL;
//	token = info->tokens;
//	new = cmd_init(info);
//	if (new == NULL)
//		printf("error in add to cmd 01\n");
//	while (token)
//	{
//		if (!(ft_strcmp(token->type, "pipe")))
//			break;
//		// if (!(ft_strcmp(token->type, "literal")))
//		str = merge_content(str, token->content);
//		if (!(ft_strcmp(token->type, "here_doc")))
//			new->here_doc_in = 1;
//		if (!(ft_strcmp(token->type, "here_doc_word")))
//			new->here_doc_eof = ft_strdup(token->content);
//		if (!(ft_strcmp(token->type, "input_red")))
//			new->in_red = 1;
//		if (!(ft_strcmp(token->type, "infile")))
//			new->name_infile = ft_strdup(token->content);
//		if (!(ft_strcmp(token->type, "output_red")))
//			new->out_red = 1;
//		if (!(ft_strcmp(token->type, "double_output_red")))
//			new->out_red = 2;
//		if (!(ft_strcmp(token->type, "outfile")))
//			new->name_outfile = ft_strdup(token->content);
//		token = token->next;
//	}
//	new->arg = ft_split_char(str, ' ');
//	free(str);
//   	add_cmd(info, new);
//	if(token)
//		printf("token type in the end [%s]\n", token->type);
//	else
//		printf("end of token \n");
//}







//t_cmd	*cmd_init(t_infos *info)
//{
//	t_cmd	*new;

//	new = (t_cmd *)malloc(sizeof(t_cmd));
//	if (new == NULL)
//		return (NULL);
//	new->arg = NULL;
//	new->index = info->nb_cmd;
//	new->process = -1;
//	new->fd_infile = -1;
//	new->fd_outfile = -1;
//	new->here_doc_in = 0;
//	new->builtin = 0;
//	new->pipe_in = 0;
//	new->pipe_out = 0;
//	new->in_red = 0;
//	new->out_red = 0;
//	new->name_infile = NULL;
//	new->name_outfile = NULL;
//	new->here_doc_eof = NULL;
//	return (new);
//}












//void	print_cmd(t_infos *info)
//{
//	t_cmd	*new;
//	int		i;

//	new = info->first_cmd;
//	if (new == NULL)
//	{
//		printf("NULL in print_cmd\n");
//		return ;
//	}
//	printf("new->args are ------ \n");
//	i = 0;
//	while(new->arg[i])
//	{
//		printf("ARG[%d] [%s]\n", i, new->arg[i]);
//		i++;
//	}
//	printf("-------------------------\n");
//	printf("index - [%d]\n", new->index);
//	printf("builtin - [%d]\n", new->builtin);
//	printf("pipe_in - [%d]\n", new->pipe_in);
//	printf("pipe_out - [%d]\n", new->pipe_out);
//	printf("fd_outfile - [%d]\n", new->fd_outfile);
//	printf("fd_infile - [%d]\n", new->fd_infile);
//	printf("in_red - [%d]\n", new->in_red);
//	printf("out_red - [%d]\n", new->out_red);
//	printf("here_doc_in - [%d]\n", new->here_doc_in);
//	printf("here_doc_eof - [%s]\n", new->here_doc_eof);
//	printf("name_infile - [%s]\n", new->name_infile);
//	printf("name_outfile - [%s]\n", new->name_outfile);

//}




//void    free_cmd(t_infos *info)
//{
//    int     i;

//    i = 0;
//    if (info->first_cmd == NULL)
//    {
//        free(info->first_cmd);
//        return ;
//    }
//    while(info->first_cmd->arg[i] != NULL)
//    {
//        free(info->first_cmd->arg[i]);
//        i++;
//    }
//    if (info->first_cmd->arg)
//        free(info->first_cmd->arg);
//    if(info->first_cmd->name_outfile)
//        free(info->first_cmd->name_outfile);
//    if (info->first_cmd->name_infile)
//        free(info->first_cmd->name_infile);
//    if (info->first_cmd->here_doc_eof)
//        free(info->first_cmd->here_doc_eof);
//    free(info->first_cmd);
//}
